{"type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"patricia-tree","href":"../../index.html","kind":"page"},{"name":"PatriciaTree","href":"../index.html","kind":"module"},{"name":"HASH_CONSED_OPERATIONS","href":"#","kind":"module-type"}],"toc":[{"title":"Hash-consing specific operations","href":"#hash-consing-specific-operations","children":[]}],"source_anchor":null,"preamble":"<p>Operations added/changed in <a href=\"../index.html#hash_consed\" title=\"hash_consed\">hash-consed</a> maps and sets.</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> <span>'a t</span></span></code></div></div><h2 id=\"hash-consing-specific-operations\"><a href=\"#hash-consing-specific-operations\" class=\"anchor\"></a>Hash-consing specific operations</h2><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-to_int\"><a href=\"#val-to_int\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> to_int : <span><span><span class=\"type-var\">'a</span> <a href=\"#type-t\">t</a></span> <span class=\"arrow\">&#45;&gt;</span></span> int</span></code></div><div class=\"spec-doc\"><p>Returns the <a href=\"../index.html#hash_consed\" title=\"hash_consed\">hash-consed</a> id of the map. Unlike <a href=\"../module-type-NODE_WITH_ID/index.html#val-to_int\"><code>NODE_WITH_ID.to_int</code></a>, hash-consing ensures that maps which contain the same keys (compared by <a href=\"../module-type-KEY/index.html#val-to_int\"><code>KEY.to_int</code></a>) and values (compared by <a href=\"../module-type-HASHED_VALUE/index.html#val-polyeq\"><code>HASHED_VALUE.polyeq</code></a>) will always be physically equal and have the same identifier.</p><p>Note that when using physical equality as <a href=\"../module-type-HASHED_VALUE/index.html#val-polyeq\"><code>HASHED_VALUE.polyeq</code></a>, some maps of different types <code>a t</code> and <code>b t</code> may be given the same identifier. See the end of the documentation of <a href=\"../module-type-HASHED_VALUE/index.html#val-polyeq\"><code>HASHED_VALUE.polyeq</code></a> for details.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-equal\"><a href=\"#val-equal\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> equal : <span><span><span class=\"type-var\">'a</span> <a href=\"#type-t\">t</a></span> <span class=\"arrow\">&#45;&gt;</span></span> <span><span><span class=\"type-var\">'a</span> <a href=\"#type-t\">t</a></span> <span class=\"arrow\">&#45;&gt;</span></span> bool</span></code></div><div class=\"spec-doc\"><p>Constant time equality using the <a href=\"../index.html#hash_consed\" title=\"hash_consed\">hash-consed</a> nodes identifiers. This is equivalent to physical equality. Two nodes are equal if their trees contain the same bindings, where keys are compared by <a href=\"../module-type-KEY/index.html#val-to_int\"><code>KEY.to_int</code></a> and values are compared by <a href=\"../module-type-HASHED_VALUE/index.html#val-polyeq\"><code>HASHED_VALUE.polyeq</code></a>.</p></div></div><div class=\"odoc-spec\"><div class=\"spec value anchored\" id=\"val-compare\"><a href=\"#val-compare\" class=\"anchor\"></a><code><span><span class=\"keyword\">val</span> compare : <span><span><span class=\"type-var\">'a</span> <a href=\"#type-t\">t</a></span> <span class=\"arrow\">&#45;&gt;</span></span> <span><span><span class=\"type-var\">'a</span> <a href=\"#type-t\">t</a></span> <span class=\"arrow\">&#45;&gt;</span></span> int</span></code></div><div class=\"spec-doc\"><p>Constant time comparison using the <a href=\"../index.html#hash_consed\" title=\"hash_consed\">hash-consed</a> node identifiers. This order is fully arbitrary, but it is total and can be used to sort nodes. It is based on node ids which depend on the order in which the nodes where created (older nodes having smaller ids).</p><p>One useful property of this order is that child nodes will always have a smaller identifier than their parents.</p></div></div>"}