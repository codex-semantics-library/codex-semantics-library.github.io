{"type":"documentation","uses_katex":false,"breadcrumbs":[{"name":"patricia-tree","href":"../../index.html","kind":"page"},{"name":"PatriciaTree","href":"../index.html","kind":"module"},{"name":"WrappedHomogeneousValue","href":"#","kind":"module"}],"toc":[],"source_anchor":null,"preamble":"<p>Same as <a href=\"../HomogeneousValue/index.html\"><code>HomogeneousValue</code></a>, but uses a wrapper (unboxed) type instead of direct equality. This avoids a problem in the typechecker with overly eager simplification of aliases. More info on <a href=\"https://discuss.ocaml.org/t/weird-behaviors-with-first-order-polymorphism/13783\">the OCaml discourse post</a>.</p>","content":"<div class=\"odoc-spec\"><div class=\"spec type anchored\" id=\"type-t\"><a href=\"#type-t\" class=\"anchor\"></a><code><span><span class=\"keyword\">type</span> <span>('a, 'map) t</span></span><span> = <span><span>(<span class=\"type-var\">'a</span>, <span class=\"type-var\">'map</span>)</span> <a href=\"../index.html#type-snd\">snd</a></span></span></code></div><div class=\"spec-doc\"><p>The type of values. A <code>'map map</code> maps <code>'key key</code> to <code>('key, 'map) value</code>. Can be mutable if desired, unless it is being used in <a href=\"../index.html#hash_consed\" title=\"hash_consed\">Hash-consed maps and sets</a>.</p></div></div>"}