# Ruby plugin for odoc generated json files (by dune build @doc-json)
# Autodectects json files placed in _data/api
# Originally written by Allan Blanchard for Frama-C's website
# https://git.frama-c.com/pub/pub.frama-c.com
#
# This expects you place files generated by 'dune build @doc-json'
# from '_build/default/_doc/_html/<package-name>' (note that this EXCLUDES the odoc package list page!)
# in '_data/api/<package-name>/<version-number>'
# where '<version-number>' has '.' replaced by '__' (Jekyll removes '.' in filenames)
#
# You also have to move the '_build/default/_doc/_html/<package-name>/db.js' file (generated by sherlodoc)
# to 'assets/js/db.<package-name>.<version-number>.js'
module OdocPlugin
  class OdocPageGenerator < Jekyll::Generator
    safe true

    def find_all_pages(hash)
      results = {}
      def iter(hash, path, results, depth)
        if hash then
          hash.each do |key, value|
            if key == 'indexhtml' then
              results[path] = value
            elsif value.is_a? Hash
              npath = path+[key]
              if depth == 1 then
                # Replace "__" in version folder name by "."
                # This is required because Jekyll strips all "." from the data file names
                version = key.gsub('__', '.')
                npath = path+[version]
              end
              iter(value, npath, results, depth+1)
            else
              raise "Don't know what to do with value #{value}\n"
            end
          end
        end
      end
      iter(hash, [], results, 0)
      results
    end

    def generate(site)
      pages = find_all_pages(site.data['api'])
      pages.each do |path, data|
        site.pages << OdocPage.new(site, path, data)
      end
    end
  end

  class OdocPage < Jekyll::Page
    def initialize(site, path, data)
      @site = site
      @base = site.source
      @dir = "api/" + path.join('/')
      @basename = 'index'
      @ext = '.html'
      @name = @basename + @ext
      @data = {
        'odoc' => data,
        'layout' => 'odoc',
        # We can get package and version from path thanks to our custom folder structure.
        # 'dune build @doc-json' generates a tree rooted at package:
        # (./package-name, ./package-name/module, ./package-name/index.html...)
        # We added a version layer:
        # (./package-name/vX.Y.Z/, ./package-name/vX.Y.Z/module, ./package-name/vX.Y.Z/index.html...)
        # The page at ./package-name is manually written (See api folder), it should list all versions.
        'package' => path[0],
        'version' => path[1]
      }
      # If the current version matches the package latest version
      # Add a redirect from /api/package/latest/path to this page
      if path[1] == site.data["packages"][path[0]]["latest-version"] then
        path_clone = [path[0]] + ["latest"] + path[2..-1] + ["index.html"]
        @data["redirect_from"] = "api/" + path_clone.join('/')
      end
    end
  end
end
